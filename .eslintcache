[{"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\index.js":"1","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\App.js":"2","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\reportWebVitals.js":"3","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\TemperatureChart.js":"4","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\pages\\HomePage.js":"5","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\Cards.js":"6","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\CardCluster.js":"7","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\CardStation.js":"8","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\CardVariable.js":"9","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\Charts.js":"10","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\SoilMoistureChart.js":"11","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\layouts\\Header.js":"12","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\SoilMoistureRealTime.js":"13","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\TemperatureRealTime.js":"14","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\AboutCards.js":"15"},{"size":500,"mtime":1608660538000,"results":"16","hashOfConfig":"17"},{"size":2637,"mtime":1610349761078,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1608660538000,"results":"19","hashOfConfig":"17"},{"size":1488,"mtime":1609772396684,"results":"20","hashOfConfig":"17"},{"size":538,"mtime":1609334964862,"results":"21","hashOfConfig":"17"},{"size":1303,"mtime":1609721350781,"results":"22","hashOfConfig":"17"},{"size":712,"mtime":1609721181901,"results":"23","hashOfConfig":"17"},{"size":2538,"mtime":1609789183372,"results":"24","hashOfConfig":"17"},{"size":2874,"mtime":1609723361674,"results":"25","hashOfConfig":"17"},{"size":1555,"mtime":1609712435066,"results":"26","hashOfConfig":"17"},{"size":1751,"mtime":1609772343245,"results":"27","hashOfConfig":"17"},{"size":482,"mtime":1610349708105,"results":"28","hashOfConfig":"17"},{"size":1981,"mtime":1609790621952,"results":"29","hashOfConfig":"17"},{"size":1708,"mtime":1609790673667,"results":"30","hashOfConfig":"17"},{"size":1906,"mtime":1609982443878,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"14v2k2",{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"34"},{"filePath":"72","messages":"73","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"68"},"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\index.js",[],["75","76"],"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\App.js",["77","78","79","80","81"],"import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, RouteHandler, Link} from \"react-router-dom\";\nimport io from \"socket.io-client\";\n\nimport Header from './components/layouts/Header';\nimport TemperatureChart from \"./components/charts/TemperatureChart\";\n// import AboutCards from './components/cards/AboutCards';\nimport Cards from \"./components/cards/Cards\"\nimport CardVariable from './components/cards/CardVariable';\n// import Charts from './components/charts/Charts';\nimport axios from \"axios\";\n\nclass App extends Component{ \n  \n  state = {\n    cards: [],\n    datacards: []    \n    \n  };\n  \n  componentDidMount() {\n    const localhosturl = '/api'\n    fetch(localhosturl)\n    .then(res=> res.json())\n    // .then(data => console.log(data));\n    .then(data => this.setState({ cards: data }))\n    \n    \n    this.socket = io('http://localhost:5000');\n    \n    this.socket.on('cluster_data', (msg) => {  \n      console.log(msg);    \n      this.setState({cards: this.state.cards.map(card => {\n        card.stations.map(station => {\n          if (station.id === msg.station){\n            console.log(station.measurements);\n            console.log(msg.data);\n            station.measurements.push(msg.data);\n\n            // station.time = msg.time;\n            // station.temperature = msg.data.temperature;\n            // station.soilMoisture = msg.data.soilMoisture;\n            // console.log(station.id, msg.station)\n          }\n        })\n        return card;\n      })})     \n    });\n\n    \n  }\n    \n  render(){\n    //console.log(this.state.cards)\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n          <Header />            \n            <Route exact path='/' render={props => (\n              <React.Fragment>                  \n                <br></br>\n                <div className=\"row\">\n                  <Cards cards={this.state.cards}/>\n                  <br></br>\n                </div>              \n              </React.Fragment>\n                  )}/>\n            <Route path='/cardvariable' component={CardVariable}/>\n            {/* <Route path=\"/about\" render={props => (\n              <React.Fragment>                  \n                <br></br>\n                <div className=\"row\">\n                  <AboutCards aboutCards={this.state.cards}\n                    addStation={this.addStation}\n                  />\n                  <br></br>\n                </div>              \n              </React.Fragment>\n                  )}/>                 */}\n          </div>\n        </div>\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\reportWebVitals.js",[],"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\TemperatureChart.js",["82"],"import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nexport class TemperatureChart extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.chartRef.current, {\r\n      type: 'line',\r\n      options: {\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'minute'\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Date and Time'\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0\r\n                // max: 35\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Temperature'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      data: {\r\n        labels: this.props.data.map(d => d.time),\r\n        datasets: [{\r\n          label: this.props.title,\r\n          data: this.props.data.map(d => d.value),\r\n          fill: false,\r\n          backgroundColor: this.props.color,\r\n          pointRadius: 0.5,\r\n          borderColor: this.props.color,\r\n          borderWidth: 1,\r\n          lineTension: 0\r\n        }]\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    return <canvas ref={this.chartRef} />;\r\n  }\r\n}\r\nexport default TemperatureChart;","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\pages\\HomePage.js",["83","84","85","86"],"import React, {useState, useEffect} from 'react';\r\nimport {Card} from '../cards/Cards';\r\n\r\nexport const HomePage = ()=>{\r\n\r\n    const [classifcation, setclassification] = useState([])\r\n\r\n    useEffect(()=>{\r\n        fetch('/api').then(response => {\r\n            if(response.ok){\r\n                return response.json()\r\n            }\r\n        }).then(data => console.log(data))\r\n    }, [])\r\n    // return(\r\n    //     <>\r\n    //         <Card listofClassification = {classifcation}/>\r\n    //     </>\r\n    // )\r\n}\r\nexport default HomePage;",["87","88"],"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\Cards.js",[],"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\CardCluster.js",[],"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\CardStation.js",["89","90","91"],"import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Link} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react'\r\nimport SoilMoistureRealTime from '../charts/SoilMoistureRealTime';\r\nimport TemperatureRealTime from '../charts/TemperatureRealTime';\r\n// import Charts from '../charts/Charts';\r\n\r\n\r\n\r\nexport class CardStation extends Component{\r\n    \r\n    render(){\r\n        const { id, measurements } = this.props.station;\r\n        // measurements[measurements.length - 1].soilMoisture\r\n        // console.log();\r\n     \r\n      return (\r\n\r\n        <div>\r\n            <br></br>              \r\n            <Link to={{pathname: 'cardvariable', stationId : id}}>\r\n                <h4>{ id }</h4>\r\n            </Link>\r\n            <br></br>\r\n            <Table celled>\r\n                <Table.Header>                    \r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Parameter</Table.HeaderCell>\r\n                        <Table.HeaderCell>Value</Table.HeaderCell>\r\n                        <Table.HeaderCell>Last Updated</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell>\r\n                            <Label ribbon>Soil Moisture</Label>\r\n                        </Table.Cell>\r\n                        <Table.Cell>{ measurements[measurements.length - 1].soilMoisture }</Table.Cell>\r\n                        <Table.Cell>{ measurements[measurements.length - 1].time }</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell>\r\n                            <Label ribbon>Temperature</Label>\r\n                        </Table.Cell>\r\n                        <Table.Cell>{ measurements[measurements.length - 1].temperature }</Table.Cell>\r\n                        <Table.Cell>{ measurements[measurements.length - 1].time}</Table.Cell>\r\n                    </Table.Row>\r\n                </Table.Body>\r\n                \r\n            </Table>\r\n            <SoilMoistureRealTime data={measurements} title='Soil Moisture' color=\"#70CAD1\"/>\r\n            <TemperatureRealTime data={measurements} title='Temperature' color=\"#70CAD1\"/>\r\n\r\n             \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  CardStation.propTypes  = {\r\n    station: PropTypes.object.isRequired,\r\n    //chartHandle: PropTypes.func.isRequired\r\n  }  \r\n\r\nexport default CardStation;","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\CardVariable.js",["92","93","94"],"import React, { Component } from \"react\";\r\nimport { format } from \"date-fns\";\r\nimport PropTypes from 'prop-types';\r\nimport { BrowserRouter as Router, Route, Link} from \"react-router-dom\";\r\nimport Charts from '../charts/Charts';\r\nimport BorderWrapper from 'react-border-wrapper'\r\n\r\nexport class CardVariable extends Component{\r\n\r\n    state = {\r\n        stationId: this.props.location.stationId,\r\n        startDate: \"\",\r\n        endDate: \"\"\r\n      };\r\n    \r\n    render(){\r\n      const { startDate, endDate, stationId } = this.state;\r\n      return (\r\n        <Router>\r\n            <br></br>\r\n            <div className=\"col-md\" style={{display: 'flex',  justifyContent:'center', alignItems:'center', width:'100%'}}>\r\n            <BorderWrapper\r\n              borderColour=\"#00bcf1\"\r\n              borderWidth=\"5px\"\r\n              borderRadius=\"15px\"\r\n              borderType=\"solid\"\r\n              innerPadding=\"30px\"\r\n              // topElement = 'Cluster '\r\n              topPosition={0.05}\r\n              topOffset=\"22px\"\r\n              topGap=\"4px\"\r\n              // rightElement='Cluster'\r\n              rightPosition={0.1}\r\n              rightOffset=\"22px\"\r\n              rightGap=\"4px\"\r\n            >   <div className=\"row\">\r\n                    <h2>{this.props.location.stationId}</h2>\r\n                </div>     \r\n                \r\n                <div className=\"row\">\r\n                    \r\n                    <label htmlFor=\"startDate\"><h3>Start Date</h3></label>\r\n                    <br></br>\r\n                    <input\r\n                        type=\"date\"\r\n                        onChange={e => this.setState({ startDate: e.target.value })}\r\n                    />\r\n                    {startDate && (\r\n                        <React.Fragment>\r\n                            <br></br>\r\n                            <label htmlFor=\"startDate\"><h3>End Date</h3></label>\r\n                            <br></br>\r\n                            <input\r\n                            type=\"date\"\r\n                            min={startDate}\r\n                            onChange={e => this.setState({ endDate: e.target.value})}\r\n                            \r\n                        />\r\n                        \r\n                        </React.Fragment>\r\n                        \r\n                    )}\r\n                    {startDate && endDate && (\r\n                        // <Link to={{pathname: 'charts', stationId : stationId, staD : startDate, endD : endDate}}>Submit</Link>\r\n                        <Link to={{pathname: 'charts', charts: this.state }}><strong>Submit</strong></Link>\r\n                    )}\r\n                </div>\r\n                \r\n                <Route path='/charts' component={Charts}/>\r\n            </BorderWrapper>\r\n        </div>\r\n        </Router>  \r\n        \r\n        \r\n        \r\n      );\r\n    }\r\n  }\r\n  \r\nexport default CardVariable;","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\Charts.js",["95"],"import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport SoilMoistureChart from './SoilMoistureChart';\r\nimport TemperatureChart from './TemperatureChart';\r\n\r\nexport class Charts extends Component{\r\n    \r\n    state = {\r\n        feeds: []\r\n    };\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { feeds: '' };\r\n    }\r\n    componentDidMount(){\r\n        \r\n        const { startDate, endDate, stationId } = this.props.location.charts;\r\n        const localhosturl = `/api/pastdata?staD=${startDate}&endD=${endDate}&staId=${stationId}`\r\n        \r\n        fetch(localhosturl)\r\n        \r\n        .then(res=> res.json())\r\n        .then(data => this.setState({ feeds: data}))\r\n        // .then(data => console.log(data))\r\n    }\r\n    render(){\r\n        \r\n        let moist, temp;\r\n        if(this.state.feeds !== undefined && this.state.feeds[1] !== undefined) {\r\n            \r\n            moist = <SoilMoistureChart data={this.state.feeds[1].data} title={this.state.feeds[1].title} color=\"#70CAD1\"/>\r\n        }\r\n        if(this.state.feeds !== undefined && this.state.feeds[0] !== undefined) {\r\n            temp = <TemperatureChart data={this.state.feeds[0].data} title={this.state.feeds[0].title} color=\"#3E517A\"/>\r\n        } \r\n      \r\n      return (\r\n        \r\n        <div>\r\n            <div>                \r\n                {moist}\r\n            </div>\r\n            <div>\r\n                {temp}\r\n            </div>\r\n        </div>     \r\n        \r\n        \r\n      );\r\n    \r\n    }\r\n  }\r\n\r\nexport default Charts;","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\SoilMoistureChart.js",["96"],"import React , { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nexport class SoilMoistureChart extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // const ctx = canvas.getContext(\"2d\");\r\n    // const gradient = ctx.createLinearGradient(0, 0, 0, height);\r\n    // gradient.addColorStop(0, 'rgba(250,174,50,1)');   \r\n    // gradient.addColorStop(1, 'rgba(250,174,50,0)');\r\n\r\n    this.myChart = new Chart(this.chartRef.current, {\r\n      type: 'line',\r\n      options: {\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'minute'\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Date and Time'\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0\r\n                // max: 100\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Soil Moisture %'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      data: {\r\n        \r\n\r\n        labels: this.props.data.map(d => d.time),\r\n        datasets: [{\r\n          label: this.props.title,\r\n          data: this.props.data.map(d => d.value),\r\n          fill: false,\r\n          backgroundColor: this.props.color,\r\n          pointRadius: 0.5,\r\n          borderColor: this.props.color,\r\n          borderWidth: 1,\r\n          lineTension: 0\r\n        }]\r\n      },\r\n      \r\n    });\r\n  }\r\n  render() {\r\n    return <canvas ref={this.chartRef} />;\r\n  }\r\n}\r\nexport default SoilMoistureChart;\r\n\r\n","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\layouts\\Header.js",[],"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\SoilMoistureRealTime.js",["97"],"import React , { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nexport class SoilMoistureRealTime extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartRef = React.createRef();\r\n  }\r\n  \r\n\r\n  componentDidMount() {\r\n    // const ctx = canvas.getContext(\"2d\");\r\n    // const gradient = ctx.createLinearGradient(0, 0, 0, height);\r\n    // gradient.addColorStop(0, 'rgba(250,174,50,1)');   \r\n    // gradient.addColorStop(1, 'rgba(250,174,50,0)');\r\n\r\n    this.myChart = new Chart(this.chartRef.current, {\r\n      type: 'line',\r\n      options: {\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'minute'\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Date and Time'\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0\r\n                // max: 100\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Soil Moisture %'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      data: {\r\n        \r\n\r\n        labels: this.props.data.map(d => d.time),\r\n        datasets: [{\r\n          label: this.props.title,\r\n          data: this.props.data.map(d => d.soilMoisture),\r\n          fill: false,\r\n          backgroundColor: this.props.color,\r\n          pointRadius: 0.5,\r\n          borderColor: this.props.color,\r\n          borderWidth: 1,\r\n          lineTension: 0\r\n        }]\r\n      },\r\n      \r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.time);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.soilMoisture);\r\n    this.myChart.update();\r\n  }\r\n\r\n  render() {\r\n    return <canvas ref={this.chartRef} />;\r\n  }\r\n}\r\nexport default SoilMoistureRealTime;\r\n\r\n",["98","99"],"D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\charts\\TemperatureRealTime.js",["100"],"import React, { Component } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nexport class TemperatureRealTime extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.chartRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.myChart = new Chart(this.chartRef.current, {\r\n      type: 'line',\r\n      options: {\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              type: 'time',\r\n              time: {\r\n                unit: 'minute'\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Date and Time'\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                min: 0\r\n                // max: 35\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Temperature'\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      },\r\n      data: {\r\n        labels: this.props.data.map(d => d.time),\r\n        datasets: [{\r\n          label: this.props.title,\r\n          data: this.props.data.map(d => d.temperature),\r\n          fill: false,\r\n          backgroundColor: this.props.color,\r\n          pointRadius: 0.5,\r\n          borderColor: this.props.color,\r\n          borderWidth: 1,\r\n          lineTension: 0\r\n        }]\r\n      }\r\n    });\r\n  }\r\n  componentDidUpdate() {\r\n    this.myChart.data.labels = this.props.data.map(d => d.time);\r\n    this.myChart.data.datasets[0].data = this.props.data.map(d => d.temperature);\r\n    this.myChart.update();\r\n  }\r\n  render() {\r\n    return <canvas ref={this.chartRef} />;\r\n  }\r\n}\r\nexport default TemperatureRealTime;","D:\\SHASINI\\England\\University of Southampton\\Modules\\Foundations of embedded IoT systems\\coursework\\client\\src\\components\\cards\\AboutCards.js",["101","102"],"import React, { Component } from \"react\";\r\nimport CardCluster from './CardCluster';\r\nimport PropTypes from 'prop-types';\r\nimport BorderWrapper from 'react-border-wrapper'\r\n\r\nexport class AboutCards extends Component{\r\n    \r\n    \r\n    render(){\r\n        \r\n      return this.props.aboutCards.map((aboutCard) => (\r\n        <div className=\"col-md-3\" style={{display: 'flex',  justifyContent:'center', alignItems:'center'}}>  \r\n            <BorderWrapper\r\n              borderColour=\"#00bcf1\"\r\n              borderWidth=\"5px\"\r\n              borderRadius=\"15px\"\r\n              borderType=\"solid\"\r\n              innerPadding=\"30px\"\r\n              topPosition={0.05}\r\n              topOffset=\"22px\"\r\n              topGap=\"4px\"\r\n              rightPosition={0.1}\r\n              rightOffset=\"22px\"\r\n              rightGap=\"4px\"\r\n            >\r\n                <div>\r\n                    <h2><strong>{ aboutCard.cluster}</strong></h2>\r\n                    \r\n                    {aboutCard.stations.map(aboutStation => (\r\n                        <div className=\"col-md-6\">\r\n                            <h4>{ aboutStation.id}</h4>\r\n                        </div>\r\n                        \r\n                        // <CardStation key={station.id} station={station}/>\r\n                    ))}\r\n                    <button onClick={this.props.addStation.bind(this, id)} style={btnStyle}>\r\n                    +\r\n                    </button>              \r\n                \r\n                </div>\r\n            </BorderWrapper>\r\n            \r\n          </div>\r\n          \r\n        // </div>\r\n        \r\n        \r\n      ));\r\n    }\r\n  }\r\nAboutCards.propTypes  = {\r\n  cards: PropTypes.array.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: \"#ff0000\",\r\n    color: \"#fff\",\r\n    border: \"none\",\r\n    padding: \"5px 9px\",\r\n    borderRadius: \"50%\",\r\n    cursor: \"pointer\",\r\n    float: \"right\",\r\n  };\r\nexport default AboutCards;",{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":2,"column":42,"nodeType":"109","messageId":"110","endLine":2,"endColumn":54},{"ruleId":"107","severity":1,"message":"111","line":2,"column":56,"nodeType":"109","messageId":"110","endLine":2,"endColumn":60},{"ruleId":"107","severity":1,"message":"112","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":24},{"ruleId":"107","severity":1,"message":"113","line":11,"column":8,"nodeType":"109","messageId":"110","endLine":11,"endColumn":13},{"ruleId":"114","severity":1,"message":"115","line":34,"column":35,"nodeType":"116","messageId":"117","endLine":34,"endColumn":37},{"ruleId":"107","severity":1,"message":"118","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":14},{"ruleId":"107","severity":1,"message":"119","line":1,"column":8,"nodeType":"109","messageId":"110","endLine":1,"endColumn":13},{"ruleId":"107","severity":1,"message":"120","line":2,"column":9,"nodeType":"109","messageId":"110","endLine":2,"endColumn":13},{"ruleId":"107","severity":1,"message":"121","line":6,"column":12,"nodeType":"109","messageId":"110","endLine":6,"endColumn":25},{"ruleId":"107","severity":1,"message":"122","line":6,"column":27,"nodeType":"109","messageId":"110","endLine":6,"endColumn":44},{"ruleId":"103","replacedBy":"123"},{"ruleId":"105","replacedBy":"124"},{"ruleId":"107","severity":1,"message":"125","line":2,"column":27,"nodeType":"109","messageId":"110","endLine":2,"endColumn":33},{"ruleId":"107","severity":1,"message":"126","line":4,"column":10,"nodeType":"109","messageId":"110","endLine":4,"endColumn":14},{"ruleId":"107","severity":1,"message":"127","line":4,"column":23,"nodeType":"109","messageId":"110","endLine":4,"endColumn":27},{"ruleId":"107","severity":1,"message":"128","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":16},{"ruleId":"107","severity":1,"message":"129","line":3,"column":8,"nodeType":"109","messageId":"110","endLine":3,"endColumn":17},{"ruleId":"107","severity":1,"message":"130","line":17,"column":35,"nodeType":"109","messageId":"110","endLine":17,"endColumn":44},{"ruleId":"107","severity":1,"message":"129","line":2,"column":8,"nodeType":"109","messageId":"110","endLine":2,"endColumn":17},{"ruleId":"107","severity":1,"message":"118","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":14},{"ruleId":"107","severity":1,"message":"118","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":14},{"ruleId":"103","replacedBy":"131"},{"ruleId":"105","replacedBy":"132"},{"ruleId":"107","severity":1,"message":"118","line":3,"column":10,"nodeType":"109","messageId":"110","endLine":3,"endColumn":14},{"ruleId":"107","severity":1,"message":"133","line":2,"column":8,"nodeType":"109","messageId":"110","endLine":2,"endColumn":19},{"ruleId":"134","severity":2,"message":"135","line":36,"column":71,"nodeType":"109","messageId":"136","endLine":36,"endColumn":73},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'RouteHandler' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'TemperatureChart' is defined but never used.","'axios' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Line' is defined but never used.","'React' is defined but never used.","'Card' is defined but never used.","'classifcation' is assigned a value but never used.","'setclassification' is assigned a value but never used.",["137"],["138"],"'Router' is defined but never used.","'Icon' is defined but never used.","'Menu' is defined but never used.","'format' is defined but never used.","'PropTypes' is defined but never used.","'stationId' is assigned a value but never used.",["137"],["138"],"'CardCluster' is defined but never used.","no-undef","'id' is not defined.","undef","no-global-assign","no-unsafe-negation"]